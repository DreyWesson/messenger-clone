{"version":3,"sources":["reportWebVitals.js","components/Message.js","firebase.js","App.js","actions/actionTypes.js","reducers/messageReducer.js","reducers/userReducer.js","reducers/rootReducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","type","value","onChange","e","target","IconButton","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","Send","actionTypes","initialState","messageReducer","state","action","console","log","user","userReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0632d43e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./Message.css\";\nimport React, { forwardRef } from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst Message = forwardRef(({ username, message }, ref) => {\n  const isUser = username === message.username;\n\n  return (\n    <div ref={ref} className={`message ${isUser && \"message__host\"}`}>\n      <Card className={isUser ? \"message__hostCard\" : \"message__guestCard\"}>\n        <CardContent>\n          <Typography color=\"white\" variant=\"h5\" component=\"h2\">\n            {!isUser && `${message.username || \"Anonymous\"}:`} {message.message}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n});\n\nexport default Message;\n","// import firebase from \"firebase\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n// import \"firebase/auth\";\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDg2sOrrFzWuv-wlCDa-askNmajhm64wVo\",\n  authDomain: \"messenger-c53be.firebaseapp.com\",\n  projectId: \"messenger-c53be\",\n  storageBucket: \"messenger-c53be.appspot.com\",\n  messagingSenderId: \"681204782779\",\n  appId: \"1:681204782779:web:541a568a2fde536f55bb9e\",\n  measurementId: \"G-8Y2GZ8TD3Q\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n// const provider = new firebase.auth.GoogleAuthProvider();\n\n// export { auth, provider };\nexport default db;\n","import { FormControl, IconButton, Input } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Message from \"./components/Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport { Send } from \"@material-ui/icons\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setMessages(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            message: doc.data(),\n          }))\n        )\n      );\n  }, []);\n\n  useEffect(() => {\n    setUsername(prompt(\"Please enter your name\"));\n  }, []);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    // setMessages([...messages, { username, message: input }]);\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      //serverTimezone which location we selected to host our database\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"app\">\n      <img\n        src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"\n        alt=\"messenger logo\"\n      />\n      <h2>Welcome, {username}</h2>\n      <FlipMove>\n        {messages.map(({ id, message }) => (\n          <Message key={id} username={username} message={message} />\n        ))}\n      </FlipMove>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input\n            className=\"app__input\"\n            placeholder=\"Enter a message...\"\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n\n          <IconButton\n            className=\"app__iconButton\"\n            disabled={!input}\n            variant=\"outlined\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n          >\n            <Send />\n          </IconButton>\n        </FormControl>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","export const actionTypes = {\n  SET_USER: \"SET_USER\",\n  SET_MSG: \"SET_MSG\",\n};\n","import { actionTypes } from \"../actions/actionTypes\";\n\nexport const initialState = {\n  message: \"refree\",\n};\n\nconst messageReducer = (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_MSG:\n      return {\n        ...state,\n        message: action.message,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;\n","import { actionTypes } from \"../actions/actionTypes\";\n\nexport const initialState = {\n  user: null,\n};\n\nconst userReducer = (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\nimport messageReducer from \"./messageReducer\";\nimport userReducer from \"./userReducer\";\n\nconst rootReducer = combineReducers({ userReducer, messageReducer });\n\n// export const initialState = {\n//   user: null,\n//   message: \"refree\",\n// };\n\n// export const actionTypes = {\n//   SET_USER: \"SET_USER\",\n// };\n\n// const rootReducer = (state = initialState, action) => {\n//   console.log(action);\n//   switch (action.type) {\n//     case actionTypes.SET_USER:\n//       console.log(action.user);\n//       return {\n//         ...state,\n//         user: action.user,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport \"./index.css\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconsole.log(\"List of Reducers Stored in STATE ðŸ‘‰\", store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}